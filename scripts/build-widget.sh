#!/bin/bash

# Heiwa React Widget Build Script for WordPress Integration
# This script builds the React widget and prepares it for WordPress plugin deployment

set -e

echo "🚀 Building React Widget for WordPress Integration..."
echo "=================================================="

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
WP_PLUGIN_DIR="$PROJECT_ROOT/wordpress-plugin/heiwa-booking-widget"
BUILD_DIR="$WP_PLUGIN_DIR/assets/build"
TEMP_DIR="$PROJECT_ROOT/.widget-build-temp"

echo "📂 Project root: $PROJECT_ROOT"
echo "📂 WordPress plugin: $WP_PLUGIN_DIR"
echo "📂 Build output: $BUILD_DIR"

# Clean previous builds
echo ""
echo "🧹 Cleaning previous builds..."
rm -rf "$BUILD_DIR"
rm -rf "$TEMP_DIR"
mkdir -p "$BUILD_DIR"
mkdir -p "$TEMP_DIR"

# Check if Next.js project exists
if [ ! -f "$PROJECT_ROOT/package.json" ]; then
    echo "❌ Error: package.json not found in $PROJECT_ROOT"
    exit 1
fi

if [ ! -f "$PROJECT_ROOT/next.config.js" ]; then
    echo "❌ Error: next.config.js not found in $PROJECT_ROOT"
    exit 1
fi

# Build Next.js application for widget
echo ""
echo "🏗️  Building Next.js application for widget..."
cd "$PROJECT_ROOT"

# Set environment for widget build
export NODE_ENV=production

# Run standard Next.js build (not export mode to avoid API route issues)
npm run build

if [ $? -ne 0 ]; then
    echo "❌ Error: Next.js build failed"
    exit 1
fi

echo "✅ Next.js build completed successfully"

# Extract React widget assets
echo ""
echo "📦 Extracting React widget assets..."

# Copy static assets
if [ -d ".next/static" ]; then
    echo "   Copying static assets..."
    cp -r .next/static/* "$BUILD_DIR/"
    echo "   ✅ Static assets copied"
else
    echo "   ⚠️  Warning: .next/static directory not found"
fi

# Find and copy CSS files
echo "   Extracting CSS files..."
CSS_COUNT=0
find .next -name "*.css" -type f | while read css_file; do
    filename=$(basename "$css_file")
    cp "$css_file" "$BUILD_DIR/widget-$filename"
    echo "   📄 Copied: widget-$filename"
    CSS_COUNT=$((CSS_COUNT + 1))
done

# Find and copy main JavaScript files
echo "   Extracting JavaScript files..."
JS_COUNT=0

# Look for main app chunks
find .next -name "*.js" -type f | grep -E "(app|main|chunk)" | head -5 | while read js_file; do
    filename=$(basename "$js_file")
    cp "$js_file" "$BUILD_DIR/widget-$filename"
    echo "   📄 Copied: widget-$filename"
    JS_COUNT=$((JS_COUNT + 1))
done

# Create widget entry point
echo ""
echo "🔧 Creating WordPress widget entry point..."

cat > "$BUILD_DIR/widget-entry.js" << 'EOF'
/**
 * Heiwa React Widget - WordPress Entry Point
 * Auto-generated by build-widget.sh
 */

// WordPress widget initialization
(function() {
    'use strict';
    
    // Wait for DOM and WordPress to be ready
    function initializeWidget() {
        if (typeof window.heiwaWidgetConfig === 'undefined') {
            console.warn('Heiwa Widget: WordPress configuration not found');
            return;
        }
        
        console.log('Heiwa Widget: Initializing React widget...');
        
        // Find widget containers
        const containers = document.querySelectorAll('.heiwa-react-widget-container');
        
        containers.forEach(function(container) {
            const widgetId = container.getAttribute('data-widget-id') || 'heiwa-widget';
            
            // Create React root and render widget
            if (typeof window.React !== 'undefined' && typeof window.ReactDOM !== 'undefined') {
                const root = window.ReactDOM.createRoot(container);
                
                // Render the BookingWidget component
                root.render(window.React.createElement(window.HeiwaBookingWidget, {
                    config: window.heiwaWidgetConfig,
                    containerId: widgetId
                }));
                
                console.log('Heiwa Widget: React widget rendered in container:', widgetId);
            } else {
                console.error('Heiwa Widget: React or ReactDOM not available');
            }
        });
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initializeWidget);
    } else {
        initializeWidget();
    }
    
    // Expose global initialization function for WordPress
    window.HeiwaBookingWidget = window.HeiwaBookingWidget || {};
    window.HeiwaBookingWidget.init = initializeWidget;
    
})();
EOF

# Create widget CSS entry point
echo "🎨 Creating widget CSS entry point..."

cat > "$BUILD_DIR/widget-styles.css" << 'EOF'
/**
 * Heiwa React Widget - WordPress Styles
 * Auto-generated by build-widget.sh
 */

/* Widget container styles */
.heiwa-react-widget-container {
    position: relative;
    z-index: 999999;
}

/* Ensure widget appears above other content */
.heiwa-booking-widget {
    z-index: 999999 !important;
}

/* WordPress theme compatibility */
.heiwa-react-widget-container * {
    box-sizing: border-box;
}

/* Import main widget styles */
EOF

# Append any found CSS files to the main styles
find "$BUILD_DIR" -name "widget-*.css" -type f | while read css_file; do
    echo "/* Imported from $(basename "$css_file") */" >> "$BUILD_DIR/widget-styles.css"
    cat "$css_file" >> "$BUILD_DIR/widget-styles.css"
    echo "" >> "$BUILD_DIR/widget-styles.css"
done

# Create build manifest
echo ""
echo "📋 Creating build manifest..."

BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
BUILD_ID="react-widget-$(date +%s)"

cat > "$BUILD_DIR/manifest.json" << EOF
{
  "name": "Heiwa React Booking Widget",
  "version": "1.0.0",
  "buildId": "$BUILD_ID",
  "buildDate": "$BUILD_DATE",
  "files": {
    "entry": "widget-entry.js",
    "styles": "widget-styles.css",
    "assets": []
  },
  "wordpress": {
    "requires": "5.0",
    "tested": "6.4",
    "dependencies": ["react", "react-dom"]
  }
}
EOF

# Update manifest with actual files
echo "   📄 Cataloging build files..."
for file in "$BUILD_DIR"/*; do
    if [ -f "$file" ]; then
        filename=$(basename "$file")
        if [[ "$filename" != "manifest.json" && "$filename" != "widget-entry.js" && "$filename" != "widget-styles.css" ]]; then
            # Add to manifest assets array (simplified approach)
            echo "   📄 Found: $filename"
        fi
    fi
done

# Calculate build size
BUILD_SIZE=$(du -sh "$BUILD_DIR" | cut -f1)

# Clean up temporary files
rm -rf "$TEMP_DIR"

# Build summary
echo ""
echo "✅ React Widget Build Complete!"
echo "================================"
echo "📊 Build Statistics:"
echo "   📂 Output directory: $BUILD_DIR"
echo "   📏 Total size: $BUILD_SIZE"
echo "   🆔 Build ID: $BUILD_ID"
echo "   📅 Build date: $BUILD_DATE"
echo ""
echo "📋 Generated Files:"
echo "   📄 widget-entry.js - Main widget JavaScript"
echo "   🎨 widget-styles.css - Combined widget styles"
echo "   📋 manifest.json - Build manifest"
echo "   📦 Static assets - React build output"
echo ""
echo "🔧 Next Steps:"
echo "   1. Update WordPress plugin to use React build files"
echo "   2. Configure wp_enqueue_script for widget-entry.js"
echo "   3. Configure wp_enqueue_style for widget-styles.css"
echo "   4. Test widget integration in WordPress"
echo ""
echo "🎯 WordPress Integration Ready!"
