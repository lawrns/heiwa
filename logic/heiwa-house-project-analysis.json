{
  "project_overview": {
    "description": "Heiwa House Admin Dashboard is a comprehensive self-contained admin dashboard for managing bookings, rooms, surf camps, and clients. Successfully migrated from Firebase to Supabase for enhanced PostgreSQL capabilities. The system serves a surf camp and accommodation business operating under two brands: 'Heiwa House' and 'Freedom Routes', providing complete business management tools including client relationships, booking management, room inventory, surf camp sessions, and additional services. The project includes both admin dashboard and client portal functionality with comprehensive testing architecture.",
    "target_users": "Business administrators, surf camp managers, booking coordinators, staff members, and clients. Admin access is controlled by email whitelist for security, while clients have their own portal for booking management.",
    "key_features": [
      "Supabase Authentication with admin email verification",
      "Full CRUD operations for bookings management",
      "Room inventory and pricing management with JSONB pricing tiers",
      "Surf camp session creation and management",
      "Client information and relationship management",
      "Add-ons and additional services management",
      "Real-time data synchronization with PostgreSQL",
      "Responsive mobile-friendly admin interface",
      "Payment processing with Stripe integration",
      "Analytics and reporting dashboard with charts",
      "Client portal with booking management and profile editing",
      "Public booking flow with payment processing",
      "Compliance features and GDPR audit trails",
      "System administration and health monitoring",
      "File upload system with Supabase Storage",
      "Email notification system",
      "Comprehensive testing with Playwright and Jest"
    ],
    "tech_stack": {
      "frontend": [
        "Next.js 15 with App Router",
        "React 19.1.0",
        "TypeScript 5",
        "Tailwind CSS 3.4.17",
        "Radix UI components",
        "Framer Motion 12.23.9",
        "React Hook Form 7.62.0",
        "Zod 4.1.5 validation",
        "Heroicons & Lucide React icons"
      ],
      "backend": [
        "Next.js API Routes",
        "Supabase PostgreSQL database",
        "Supabase Auth",
        "Supabase Storage",
        "Stripe payment processing",
        "Email service integration"
      ],
      "database": [
        "Supabase PostgreSQL",
        "UUID primary keys",
        "JSONB columns for complex data",
        "Row Level Security (RLS) policies",
        "Automatic timestamps with triggers"
      ],
      "other": [
        "Playwright testing framework",
        "ESLint & TypeScript checking",
        "Netlify/Vercel deployment",
        "Docker containerization support"
      ]
    },
    "known_issues": [
      "Some Playwright tests have syntax errors and need fixing",
      "Jest unit tests configuration has validation warnings",
      "Test selectors need updates for strict mode compliance",
      "Some legacy Firebase references may still exist in documentation"
    ],
    "user_feedback": [
      "Migration from Firebase to Supabase completed successfully",
      "Admin interface is responsive and user-friendly",
      "Comprehensive testing architecture implemented",
      "Client portal provides excellent user experience",
      "Analytics dashboard provides valuable business insights"
    ]
  },
  "architecture": {
    "high_level_design": "Modern full-stack web application built with Next.js 15 App Router architecture. The system follows a client-server model with server-side rendering, API routes for backend operations, and Supabase as the backend-as-a-service provider. The architecture includes separate admin and client portals, public booking flow, with role-based access control and comprehensive security measures. Features comprehensive testing architecture with Playwright and Jest.",
    "data_flow": "Client requests flow through Next.js middleware for authentication, then to page components that fetch data via Supabase client or API routes. Admin operations use Supabase Admin SDK with service role key for elevated permissions. Real-time updates are handled through Supabase subscriptions. Payment flows integrate with Stripe webhooks for secure transaction processing. File uploads handled through Supabase Storage with proper bucket organization.",
    "deployment": {
      "environment": "Cloud-based deployment on Netlify (recommended) or Vercel, with Supabase as the backend service provider. Production-ready with comprehensive testing suite.",
      "ci_cd": "Automated deployment through Git integration with Netlify/Vercel. Build process includes TypeScript checking, linting, Playwright testing, and Jest unit tests. Environment variables managed through platform dashboards."
    },
    "scalability": "Horizontal scaling handled by Supabase infrastructure. Application designed for multi-tenant usage with RLS policies. Caching strategies implemented for static assets. Database queries optimized with proper indexing and pagination support. Real-time subscriptions for live data updates."
  },
  "code_structure": {
    "directory_layout": {
      "description": "Well-organized Next.js 15 App Router structure with clear separation of concerns. Source code in src/ directory with app/, components/, lib/, and hooks/ subdirectories. Configuration files at root level with deployment and testing configurations.",
      "root_folders": [
        "src/ - Main source code directory",
        "supabase/ - Database migrations and schema",
        "tests/ - Playwright test files",
        "scripts/ - Utility and setup scripts",
        "beast/ - Documentation and setup guides",
        "logic/ - Project analysis and documentation",
        "node_modules/ - Dependencies",
        "public/ - Static assets"
      ]
    },
    "modules_components": {
      "frontend": [
        "src/app/admin/ - Admin dashboard pages and layouts",
        "src/app/client/ - Client portal pages",
        "src/app/weeks/ - Public booking flow pages",
        "src/app/checkout/ - Payment and checkout pages",
        "src/components/admin/ - Admin-specific components",
        "src/components/client/ - Client portal components",
        "src/components/ui/ - Reusable UI components (Radix UI based)",
        "src/components/analytics/ - Analytics and reporting components",
        "src/components/booking/ - Booking workflow components",
        "src/components/compliance/ - GDPR and compliance features",
        "src/components/system/ - System administration components"
      ],
      "backend": [
        "src/app/api/firebase-* - Legacy-named API routes using Supabase",
        "src/app/api/client/ - Client portal API endpoints",
        "src/app/api/payments/ - Stripe payment processing",
        "src/app/api/webhooks/ - Webhook handlers",
        "src/app/api/gdpr/ - GDPR compliance endpoints",
        "src/lib/supabase-admin.ts - Supabase admin operations",
        "src/lib/auth.ts - Authentication utilities",
        "src/lib/schemas.ts - Zod validation schemas",
        "src/lib/stripe-service.ts - Payment processing service",
        "src/middleware.ts - Next.js middleware for auth"
      ],
      "shared": [
        "src/lib/utils.ts - Utility functions",
        "src/lib/config.ts - Application configuration and feature flags",
        "src/lib/supabase/ - Supabase client configurations",
        "src/lib/email-service.ts - Email notification service",
        "src/hooks/ - Custom React hooks",
        "src/styles/ - Global styles and design tokens",
        "tests/ - Comprehensive test suite (Playwright + Jest)",
        "scripts/ - Database migration and setup scripts"
      ]
    },
    "coding_standards": {
      "languages": ["TypeScript", "JavaScript", "SQL", "CSS"],
      "style_guides": "ESLint configuration with Next.js rules, Prettier for code formatting, TypeScript strict mode enabled",
      "best_practices": [
        "Type-safe development with TypeScript",
        "Component-based architecture with React",
        "Server-side rendering with Next.js App Router",
        "Database-first design with PostgreSQL",
        "Security-first approach with RLS policies",
        "Test-driven development with Playwright"
      ]
    },
    "version_control": {
      "repository": "https://github.com/spookydinero/wavecampdashboard.git",
      "branching_strategy": "Main branch deployment with feature branches for development",
      "current_branch": "main"
    }
  },
  "dependencies_and_setup": {
    "libraries_frameworks": [
      {
        "name": "@supabase/supabase-js",
        "version": "2.57.2",
        "purpose": "Supabase client for database and auth operations"
      },
      {
        "name": "next",
        "version": "15.4.4",
        "purpose": "React framework with App Router"
      },
      {
        "name": "react",
        "version": "19.1.0",
        "purpose": "UI library for building components"
      },
      {
        "name": "@radix-ui/react-*",
        "version": "Various 1.x-2.x",
        "purpose": "Accessible UI component primitives"
      },
      {
        "name": "tailwindcss",
        "version": "3.4.17",
        "purpose": "Utility-first CSS framework"
      },
      {
        "name": "@playwright/test",
        "version": "1.55.0",
        "purpose": "End-to-end testing framework"
      },
      {
        "name": "stripe",
        "version": "18.5.0",
        "purpose": "Payment processing integration"
      },
      {
        "name": "zod",
        "version": "4.1.5",
        "purpose": "TypeScript-first schema validation"
      },
      {
        "name": "react-dnd",
        "version": "16.0.1",
        "purpose": "Drag and drop functionality for assignments"
      },
      {
        "name": "react-big-calendar",
        "version": "1.19.4",
        "purpose": "Calendar component for booking management"
      },
      {
        "name": "recharts",
        "version": "3.1.2",
        "purpose": "Charts and analytics visualization"
      }
    ],
    "build_tools": {
      "tool": "Next.js build system with npm package manager",
      "configuration": {
        "typescript": "Strict mode enabled with custom tsconfig.json",
        "eslint": "Next.js ESLint configuration with custom rules",
        "tailwind": "Custom configuration with design tokens",
        "playwright": "Multi-browser testing configuration"
      }
    },
    "environment_variables": [
      "NEXT_PUBLIC_SUPABASE_URL - Supabase project URL",
      "NEXT_PUBLIC_SUPABASE_ANON_KEY - Supabase anonymous key",
      "SUPABASE_SERVICE_ROLE_KEY - Supabase service role key",
      "SUPABASE_DATABASE_URL - PostgreSQL connection string",
      "STRIPE_SECRET_KEY - Stripe payment processing",
      "NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY - Stripe public key",
      "EMAIL_SERVICE_API_KEY - Email notification service",
      "ADMIN_EMAILS - Comma-separated list of admin email addresses"
    ],
    "installation_guide": "1. Clone repository 2. Install Node.js 18+ 3. Run npm install 4. Copy .env.example to .env.local 5. Configure Supabase project 6. Run database migrations 7. Start development server with npm run dev"
  },
  "functionality_and_behavior": {
    "core_workflows": "Admin authentication via email whitelist → Dashboard overview with key metrics → Navigate to specific management sections (Clients, Bookings, Rooms, Surf Camps) → Perform CRUD operations → Real-time data updates → Analytics and reporting. Client portal workflow: Authentication → Dashboard → View/manage bookings → Update profile and preferences.",
    "api_endpoints": [
      {
        "endpoint": "/api/firebase-bookings",
        "method": "GET/POST",
        "description": "Manage booking operations with Supabase backend"
      },
      {
        "endpoint": "/api/firebase-clients",
        "method": "GET/POST/PUT/DELETE",
        "description": "Client management operations"
      },
      {
        "endpoint": "/api/client/profile",
        "method": "GET/PUT",
        "description": "Client portal profile management"
      },
      {
        "endpoint": "/api/payments/create-checkout-session",
        "method": "POST",
        "description": "Create Stripe checkout session for payments"
      },
      {
        "endpoint": "/api/webhooks/stripe",
        "method": "POST",
        "description": "Handle Stripe webhook events"
      },
      {
        "endpoint": "/api/upload",
        "method": "POST",
        "description": "File upload to Supabase Storage"
      },
      {
        "endpoint": "/api/send-email",
        "method": "POST",
        "description": "Send email notifications"
      },
      {
        "endpoint": "/api/gdpr/export",
        "method": "POST",
        "description": "Export user data for GDPR compliance"
      },
      {
        "endpoint": "/api/gdpr/delete",
        "method": "POST",
        "description": "Delete user data for GDPR compliance"
      }
    ],
    "data_models": {
      "schemas": [
        "Client - Personal information and booking history",
        "Room - Accommodation details with pricing and amenities",
        "SurfCamp - Surf camp sessions with dates and capacity",
        "Booking - Reservation details with items and payments",
        "AddOn - Additional services and equipment",
        "Payment - Transaction records and status tracking"
      ],
      "relationships": "Clients have many Bookings, Bookings contain multiple BookingItems (rooms, surf camps, add-ons), Rooms have RoomAssignments, SurfCamps have CampWeeks, Payments belong to Bookings"
    },
    "error_handling": [
      "Global error boundaries for React components",
      "API route error handling with proper HTTP status codes",
      "Supabase client error handling with fallback mechanisms",
      "Form validation with Zod schemas and user-friendly messages",
      "Authentication error handling with redirect flows"
    ],
    "logging_monitoring": {
      "tools": "Built-in Next.js logging, Supabase dashboard monitoring, potential integration with Sentry or similar services",
      "configurations": [
        "Console logging for development",
        "Error tracking for production deployment",
        "Performance monitoring through Vercel/Netlify analytics"
      ]
    }
  },
  "performance_and_security": {
    "performance_metrics": {
      "benchmarks": "Page load times ~200-500ms, Server startup ~1.6 seconds, Test execution ~23 seconds for 21 tests across 3 browsers",
      "bottlenecks": [
        "Database queries optimized with proper indexing",
        "Image loading optimized with Next.js Image component",
        "Bundle size optimized with tree shaking and code splitting"
      ]
    },
    "security_analysis": {
      "vulnerabilities": "Regular security updates, dependency scanning, secrets management through environment variables",
      "authentication": "Supabase Auth with email/password, admin email whitelist verification",
      "authorization": [
        "Row Level Security (RLS) policies in PostgreSQL",
        "Admin-only access control through middleware",
        "Role-based permissions system"
      ],
      "encryption": "Data at rest encrypted by Supabase, HTTPS for data in transit, secure environment variable handling"
    },
    "testing": {
      "unit_tests": [
        "Zod schema validation tests",
        "Utility function tests",
        "API route integration tests"
      ],
      "integration_tests": [
        "API route testing with mocked Supabase",
        "Database operation tests",
        "Authentication flow tests"
      ],
      "e2e_tests": [
        "Admin dashboard navigation tests",
        "Booking flow tests",
        "Payment integration tests",
        "Client portal functionality tests",
        "Room assignment drag-and-drop tests",
        "Calendar functionality tests",
        "Analytics dashboard tests"
      ],
      "coverage": "106+ test cases with Playwright and Jest, comprehensive cross-browser testing",
      "test_status": "Some tests need syntax fixes and selector updates for strict mode compliance"
    }
  },
  "user_interface_experience": {
    "ui_overview": "Modern, responsive admin interface built with Tailwind CSS and Radix UI components. Clean, professional design with consistent spacing, typography, and color scheme. Mobile-friendly responsive layout with sidebar navigation and card-based content organization. Dark/light theme support with design tokens.",
    "ux_flows": [
      "Admin login → Dashboard overview → Section navigation → Data management → Real-time updates",
      "Client authentication → Personal dashboard → Booking management → Profile updates",
      "Booking creation → Room selection → Add-ons → Payment processing → Confirmation",
      "Analytics viewing → Data filtering → Export functionality → Report generation"
    ],
    "accessibility": {
      "wcag_compliance": "Built with Radix UI for accessibility compliance, keyboard navigation support, screen reader compatibility",
      "features": "ARIA labels, semantic HTML structure, keyboard navigation, focus management, color contrast compliance"
    },
    "internationalization": {
      "supported_languages": ["English (primary)"],
      "implementation": "Prepared for i18n with structured text content, timezone handling for Pacific Time"
    }
  },
  "assets_and_resources": {
    "files": [
      {
        "type": "configuration",
        "path": "netlify.toml, vercel.json - Deployment configurations"
      },
      {
        "type": "documentation",
        "path": "README.md, DEPLOYMENT.md, SUPABASE_MIGRATION.md - Project documentation"
      },
      {
        "type": "database",
        "path": "supabase/migrations/ - Database schema and migrations"
      },
      {
        "type": "testing",
        "path": "tests/ - Playwright test files and configurations"
      }
    ],
    "external_services": "Supabase (database, auth, storage), Stripe (payments), Netlify/Vercel (hosting), potential email service integration",
    "documentation": {
      "readme": "Comprehensive setup and deployment guide with troubleshooting section",
      "api_docs": "Inline code documentation, API route documentation in source files"
    }
  },
  "potential_improvements": {
    "issues": [
      {
        "description": "Some Playwright tests have syntax errors and compilation issues",
        "impact": "Medium - Tests need fixing for proper CI/CD integration"
      },
      {
        "description": "Jest configuration has validation warnings for moduleNameMapping",
        "impact": "Low - Tests run but with warnings"
      },
      {
        "description": "Test selectors need updates for strict mode compliance",
        "impact": "Medium - Some tests may fail in strict mode"
      },
      {
        "description": "Legacy Firebase references in some documentation",
        "impact": "Low - Migration completed successfully but documentation cleanup needed"
      }
    ],
    "recommendations": "1. Fix Playwright test syntax errors and Jest configuration warnings 2. Update test selectors for strict mode compliance 3. Implement comprehensive error monitoring with Sentry 4. Add more granular user permissions and roles 5. Enhance email notification system 6. Add data export/import functionality 7. Implement advanced analytics and reporting 8. Add mobile app support 9. Enhance real-time collaboration features 10. Complete documentation cleanup from Firebase references"
  },
  "metadata": {
    "created_at": "2025-09-06T00:00:00Z",
    "last_updated": "2025-01-09T00:00:00Z",
    "version_history": [
      {
        "version": "1.0.0",
        "date": "2025-09-04",
        "description": "Initial release with Firebase backend"
      },
      {
        "version": "1.1.0",
        "date": "2025-09-05",
        "description": "Complete migration to Supabase with enhanced features"
      },
      {
        "version": "1.2.0",
        "date": "2025-01-04",
        "description": "Added client portal, analytics dashboard, and GDPR compliance"
      },
      {
        "version": "1.3.0",
        "date": "2025-01-09",
        "description": "Comprehensive testing architecture with Playwright and Jest"
      }
    ],
    "contributors": [
      {
        "name": "Julian",
        "role": "Lead Developer",
        "contributions": "Initial development, Firebase integration, deployment fixes"
      },
      {
        "name": "lawrns",
        "role": "Senior Developer",
        "contributions": "Supabase migration, testing implementation, feature enhancements"
      },
      {
        "name": "spookydinero",
        "role": "Current Maintainer",
        "contributions": "Project maintenance, testing architecture, documentation updates"
      }
    ],
    "project_status": "Active - Production ready with comprehensive testing suite, ongoing maintenance and feature development"
  }
}
